# 배포시 릴리즈명에서 "loki-grafana" 사용금지
# 자동생성 이름과 중복돼서 service 생성시 충돌발생

test_pod:
  enabled: false

promtail:
  enabled: false

fluent-bit:
  enabled: false

prometheus:
  enabled: false

filebeat:
  enabled: false

logstash:
  enabled: false

# proxy is currently only used by loki test pod
# Note: If http_proxy/https_proxy are set, then no_proxy should include the
# loki service name, so that tests are able to communicate with the loki
# service.
proxy:
  http_proxy: ""
  https_proxy: ""
  no_proxy: ""


loki:
  enabled: true
  # 클러스터 내부 Grafana에서 Default Datasource로 취급할것인가 여부
  isDefault: false

  # 클러스터 내부 Grafana에서 Loki Datasource를 프로비전하기 위한 ConfigMap에 사용됨. 외부노출시 사용불가.
  url: http://{{(include "loki.serviceName" .)}}:{{ .Values.loki.service.port }}
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  livenessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  datasource:
    jsonData: "{}"
    uid: ""

  service:
    type: LoadBalancer
    # nodePort:
    port: 3100
    annotations: {}
    labels: {}
    targetPort: http-metrics

  config:
    compactor:
      retention_enabled: true  # false면, 무제한 저장
    limits_config:
      retention_period: 168h    # default: 744h(31일), 최소 24h
  persistence:
    enabled: true
    size: 100Gi
    # 사전 설정된 pvc 있는 경우 이름을 지정
    # existingClaim: loki-pv-claim

    ############################################
    # pv의 실제 로컬저장경로 변경시
    ############################################
    # helm install 전에 별도 매니페스트로 pv, pvc를 생성하는 방식(정적 프로비저닝)이 가장 편하다.

    # 정적 프로비저닝? => pv와 pvc를 매니페스트로 수동생성
    # 동적 프로비저닝? => pv와 pvc를 사전명세인 StorageClass와 Provisioner로 자동생성

    # 동적 프로비저닝 미사용 이유
      # pv로컬저장경로를 바꾸려면, storageClass와 provisioner를 둘 다 설정해야 한다.
      # storageClass는 매니페스트 하나만 작성하면되지만, provisioner는 일반적으로 K8s 배포판에 항시 실행되는 kube-system Pod이다. 
      # K3s의 경우, local-path-provisioner를 비활성화하고, 새로 설치해야 해서 너무 번거로움
      # 또한, provisioner 변경시 클러스터 내 실행중인 모든 pv에 영향을 미칠 리스크가 있음
      # 상당한 수의 pv를 다루지 않는 한 비효율적인 방법이다.

    # loki-stack 헬름value에서 pvc설정이 지원되지만, 이를 사용하지않고 별도 매니페스트로 작성하는 이유
     # loki-stack 차트에서 동적프로비저닝이 강제되기 때문에 사용하지않는다.
     # 정적 프로비저닝하려면 storageClassName에 "" 빈 따옴표를 넣어서 storageClass를 미선택해야 하는데, 헬름차트에선 빈 값으로 인식해서 default StorageClass가 강제선택되어버림(동적프로비저닝 강제활성)
    

grafana:
  enabled: true
  sidecar:
    datasources:
      label: ""
      labelValue: ""
      enabled: true
      maxLines: 1000
  image:
    tag: 8.3.5

  service:
    enabled: true
    type: LoadBalancer
    port: 3000  # 80
    targetPort: 3000
      # targetPort: 4181 To be used with a proxy extraContainer
    ## Service annotations. Can be templated.
    annotations: {}
    labels: {}
    portName: service
    # Adds the appProtocol field to the service. This allows to work with istio protocol selection. Ex: "http" or "tcp"
    appProtocol: ""
    
  adminUser: admin
  adminPassword: admin
  
  persistence:
    type: statefulset  # helm uninstall 해도 남아있게 하려면 statefulset
    enabled: true

  ## Configure grafana dashboard providers
  ## ref: http://docs.grafana.org/administration/provisioning/#dashboards
  ##
  ## `path` must be /var/lib/grafana/dashboards/<provider_name>
  ##
  dashboardProviders: # {}
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'my-default'
          orgId: 1
          folder: 'my-folder'
          type: file
          disableDeletion: true
          editable: false
          options:
            path: /var/lib/grafana/dashboards/my-default

  ## Configure grafana dashboard to import
  ## NOTE: To use dashboards you must also enable/configure dashboardProviders
  ## ref: https://grafana.com/dashboards
  ##
  ## dashboards per provider, use provider name as key.
  ##
  dashboards: # {}
    my-default:
      logs-app:
        gnetId: 13639
        revision: 2
        datasource: Loki
      loki-kubernetes-logs:
        gnetId: 15141
        revision: 1
        datasource: Loki

